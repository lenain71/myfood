@page "/"

<div class="container" style="padding: 20px;">
    <div class="row">
        <div class="col">
            <h3>PH (last mesure : @pHLastValue)</h3>

            <RadzenChart>
                <RadzenLineSeries Smooth="@smooth" Stroke="green" Data="@pHValues" CategoryProperty="captureDate" ValueProperty="value">
                    <RadzenMarkers MarkerType="MarkerType.Circle" Fill="green" Stroke="green" />
                </RadzenLineSeries>
                <RadzenCategoryAxis FormatString="{0:t}"/>
                <RadzenValueAxis FormatString="{0:F1}">
                    <RadzenGridLines Visible="true" />
                </RadzenValueAxis>
                <RadzenLegend Visible="false" />
                <RadzenTooltipOptions Visible="false" />
            </RadzenChart>

            <h3>Air Temperature (last mesure : @airTempLastValue°C)</h3>

            <RadzenChart>
                <RadzenLineSeries Smooth="@smooth" Stroke="green" Data="@airTempValues" CategoryProperty="captureDate" ValueProperty="value">
                    <RadzenMarkers MarkerType="MarkerType.Circle" Fill="green" Stroke="green" />
                </RadzenLineSeries>
                <RadzenCategoryAxis FormatString="{0:t}"/>
                <RadzenValueAxis>
                    <RadzenGridLines Visible="true" />
                </RadzenValueAxis>
                <RadzenLegend Visible="false" />
                <RadzenTooltipOptions Visible="false" />
            </RadzenChart>

        </div>

        <div class="col">
            <h3>Water Temperature (last mesure : @waterTempLastValue°C)</h3>

            <RadzenChart>
                <RadzenLineSeries Smooth="@smooth" Stroke="green" Data="@waterTempValues" CategoryProperty="captureDate" ValueProperty="value">
                    <RadzenMarkers MarkerType="MarkerType.Circle" Fill="green" Stroke="green" />
                </RadzenLineSeries>
                <RadzenCategoryAxis FormatString="{0:t}"/>
                <RadzenValueAxis>
                    <RadzenGridLines Visible="true" />
                </RadzenValueAxis>
                <RadzenLegend Visible="false" />
                <RadzenTooltipOptions Visible="false" />
            </RadzenChart>

            <h3>Air Humidity (last mesure : @humidityLastValue%)</h3>

            <RadzenChart>
                <RadzenLineSeries Smooth="@smooth" Stroke="green" Data="@humidityValues" CategoryProperty="captureDate" ValueProperty="value">
                    <RadzenMarkers MarkerType="MarkerType.Circle" Fill="green" Stroke="green" />
                </RadzenLineSeries>
                <RadzenCategoryAxis FormatString="{0:t}"/>
                <RadzenValueAxis>
                    <RadzenGridLines Visible="true" />
                </RadzenValueAxis>
                <RadzenLegend Visible="false" />
                <RadzenTooltipOptions Visible="false" />
            </RadzenChart>
        </div>
    </div>
</div>

@code {
    bool smooth = false;
    decimal pHLastValue = 0;
    decimal waterTempLastValue = 0;
    decimal airTempLastValue = 0;
    decimal humidityLastValue = 0;

    protected override void OnInitialized()
    { 
            var databaseModel = DatabaseModel.GetInstance;

            var task= Task.Run(async () =>
            {
                pHValues = await databaseModel.GetLastWeeksMesures(SensorTypeEnum.pH);
                pHLastValue = await databaseModel.GetLastMesure(SensorTypeEnum.pH); 

                waterTempValues = await databaseModel.GetLastWeeksMesures(SensorTypeEnum.waterTemperature);
                waterTempLastValue = await databaseModel.GetLastMesure(SensorTypeEnum.waterTemperature); 

                airTempValues = await databaseModel.GetLastWeeksMesures(SensorTypeEnum.airTemperature);
                airTempLastValue = await databaseModel.GetLastMesure(SensorTypeEnum.airTemperature); 

                humidityValues = await databaseModel.GetLastWeeksMesures(SensorTypeEnum.humidity);
                humidityLastValue = await databaseModel.GetLastMesure(SensorTypeEnum.humidity); 
            });
            task.Wait();
    }

    List<Measure> pHValues = new List<Measure>();
    List<Measure> waterTempValues = new List<Measure>();
    List<Measure> airTempValues = new List<Measure>();
    List<Measure> humidityValues = new List<Measure>();

}